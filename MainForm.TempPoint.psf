<File version="2.1">
  <FileID>8a699e06-2426-4690-b98d-fe04fe0b3e35</FileID>
  <Preview>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
kjLMAJAkKcMMAEmSMswAkCQpwwwASZIyzACQJCnDDABJkjLMAJAkKcMMAEmSMswAkCQpwwwASZIy
zACQJCnDDABJkjLMAJAkKcMMAEmSMswAkCQpwwwASZIyzACQJCnDDABJkjLMAJAkKcMMAEmSMswA
kCQpwwwASZIyzACQJCnDDABJkjLMAJAkKcMMAEmSMswAkCQpwwwASZIyzACQJCnDDABJkjLMAJAk
KcMMAEmSMswAkCQpwwwASZIyzACQJCnDDABJkjLMAJAkKcMMAEmSMswAkCQpwwwASZIyzACQJCnD
DABJkjLMAJAkKcMMAEmSMswAkCQpwwwASZIyzACQJCnDDABJkjLMAJAkKcMMAEmSMswAkCQpwwwA
SZIyzACQJCnDDABJkjLMAJAkKcMMAEmSMswAkCQpwwwASZIyzACQJCnDDABJkjLMAJAkKcMMAEmS
MswAkCQpwwwASZIyzACQJCnDDABJkjLMAJAkKcMMAEmSMswAkCQpwwwASZIyzACQJCnDDABJkjLM
AJAkKcMMAEmSMswAkCQpwwwASZIyzACQJCnDDABJkjLMAJAkKcMMAEmSMswAkCQpwwwASZIyzACQ
JCnDDABJkjLMAJAkKcMMAEmSMswAkCQpwwwASZIyzACQJCnDDABJkjLMAJAkKcMMAEmSMswAkCQp
wwwASZIyzACQJCnDDABJkjLMAJAkKcMMAEmSMswAkCQpwwwASZIyzACQJCnDDABJkjLMAJAkKcMM
AEmSMswAkCQpwwwASZIyzACQJCnDDABJkjLMAJAkKcMMAEmSMswAkCQpwwwASZIyzACQJCnDDABJ
kjLMAJAkKcMMAEmSMswAkCQpwwwASZIyzACQJCnDDABJkjLMAJAkKcMMAEmSMswAkCQpwwwASZIy
zACQJCnDDABJkjLMAJAkKcMMAEmSMswAkCQpwwwASZIyzACQJCnDDABJkjLMAJAkKcMMAEmSMswA
kCQpwwwASZIyzACQJCnDDABJkjLMAJAkKcMMAEmSMswAkCQpwwwASZIyzACQJCnDDABJkjLMAJAk
KcMMAEmSMswAkCQpwwwASZIyzACQJCnDDABJkjLMAJAkKcMMAEmSMswAkCQpwwwASZIyzACQJCnD
DABJkjLMAJAkKcMMAEmSMswAkCQpwwwASZIyzACQJCnDDABJkjLMAJAkKcMMAEmSMswAkCQpwwwA
SZIyzACQJCnDDABJkjLMAJAkKcMMAEmSMswAkCQpwwwASZIyzACQJCnDDABJkjLMAJAkKcMMAEmS
MswAkCQpwwwASZIyzACQJCnDDABJkjLMAJAkKcMMAEmSMswAkCQpwwwASZIyzACQJCnDDABJkjLM
AJAkKcMMAEmSMswAkCQpwwwASZIyzACQJCnDDABJkjLMAJAkKcMMAEmSMswAkCQpwwwASZIyzACQ
JCnDDABJkjLMAJAkKcMMAEmSMuyZB8DmD7dXPIyIO2tr5Y0kSdKPt/v3H8bQxM2nD4DX33j79PXZ
pRhIa6FYDJIk6cfb8MStuNJ99ekDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4C/JT37y/wFpizNZ
AN+WLwAAAABJRU5ErkJggg==</Preview>
  <Object type="System.Windows.Forms.Form, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="cb_Site1" children="Controls">
    <Property name="AutoScaleDimensions">6, 13</Property>
    <Property name="AutoScaleMode">Font</Property>
    <Property name="ClientSize">1349, 665</Property>
    <Property name="ContextMenuStrip">
      <Reference name="contextmenustrip1" />
    </Property>
    <Property name="FormBorderStyle">FixedDialog</Property>
    <Property name="MaximizeBox">False</Property>
    <Property name="Name">cb_Site1</Property>
    <Property name="StartPosition">CenterScreen</Property>
    <Property name="Text">SysAdProj</Property>
    <Event name="Load">cb_Site1_Load</Event>
    <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="lbl_Folder" children="Controls">
      <Property name="AutoSize">True</Property>
      <Property name="Font">Microsoft Sans Serif, 9.75pt</Property>
      <Property name="Location">225, 8</Property>
      <Property name="Name">lbl_Folder</Property>
      <Property name="Size">86, 20</Property>
      <Property name="TabIndex">6</Property>
      <Property name="Text">Current View:</Property>
      <Property name="UseCompatibleTextRendering">True</Property>
      <Event name="Click">lbl_Folder_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="lbl_Site" children="Controls">
      <Property name="AutoSize">True</Property>
      <Property name="Font">Microsoft Sans Serif, 9.75pt</Property>
      <Property name="Location">12, 10</Property>
      <Property name="Name">lbl_Site</Property>
      <Property name="Size">32, 20</Property>
      <Property name="TabIndex">5</Property>
      <Property name="Text">Site:</Property>
      <Property name="UseCompatibleTextRendering">True</Property>
    </Object>
    <Object type="System.Windows.Forms.ComboBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="combobox1" children="Controls">
      <Property name="AutoCompleteMode">SuggestAppend</Property>
      <Property name="AutoCompleteSource">ListItems</Property>
      <Property name="FormattingEnabled">True</Property>
      <Property name="Location">45, 7</Property>
      <Property name="Name">combobox1</Property>
      <Property name="Size">150, 21</Property>
      <Property name="TabIndex">0</Property>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="btn_Folder" children="Controls">
      <Property name="Location">547, 4</Property>
      <Property name="Name">btn_Folder</Property>
      <Property name="Size">30, 23</Property>
      <Property name="TabIndex">4</Property>
      <Property name="Text">...</Property>
      <Property name="UseCompatibleTextRendering">True</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">btn_Folder_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.TextBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="cb_Folder" children="Controls">
      <Property name="AutoCompleteMode">SuggestAppend</Property>
      <Property name="AutoCompleteSource">FileSystemDirectories</Property>
      <Property name="Location">313, 6</Property>
      <Property name="Name">cb_Folder</Property>
      <Property name="Size">228, 20</Property>
      <Property name="TabIndex">3</Property>
      <Property name="Text">Select DTG Folder</Property>
    </Object>
  </Object>
  <Object type="System.Windows.Forms.FolderBrowserDialog, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="folderbrowserdialog1">
    <Property name="Description">Select the DTG data you would like to view.</Property>
  </Object>
  <Object type="System.Windows.Forms.ContextMenuStrip, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="contextmenustrip1" children="Controls">
    <Property name="Name">contextmenustrip1</Property>
    <Property name="Size">61, 4</Property>
  </Object>
  <Code><![CDATA[
#-------------------------------------------------------
# NOTE: When new TabPage added place the validation code
# 		in the Test-WizardPage function.
#-------------------------------------------------------
function Test-WizardPage
{
<#
	Add TabPages and place the validation code in this function
#>
	[OutputType([boolean])]
	param([System.Windows.Forms.TabPage]$tabPage)
	
	if($tabPage -eq $tabpageStep1)
	{
		#TODO: Enter Validation Code here for Step 1
		if(-not $textboxName.Text)
		{
			return $false	
		}
		
		return $true
	}
	elseif ($tabPage -eq $tabpageStep2)
	{
		#TODO: Enter Validation Code here for Step 2
		if($checkboxCheckToContinue.Checked)
		{
			return $true
		}
		
		return $false
	}
	elseif ($tabPage -eq $tabpageStep3)
	{
		#TODO: Enter Validation Code here for Step 3
		if(	$radiobuttonOption1.Checked -or
			$radiobuttonOption2.Checked -or
			$radiobuttonOption3.Checked)
		{
			return $true
		}
	}
	#Add more pages here
	
	return $false
}



$buttonFinish_Click={
	#-------------------------------------------------------
	# TODO: Place finalization script here
	#-------------------------------------------------------
	
}

#region Events and Functions
$cb_Site1_Load={
	Update-NavButtons
}

function Update-NavButtons
{
	<# 
		.DESCRIPTION
		Validates the current tab and Updates the Next, Prev and Finish buttons.
	#>
	$enabled = Test-WizardPage $tabcontrolWizard.SelectedTab
	$buttonNext.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	$buttonBack.Enabled = $tabcontrolWizard.SelectedIndex -gt 0
	$buttonFinish.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)	
	#Uncomment to Hide Buttons
	#$buttonNext.Visible = ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	#$buttonFinish.Visible = ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)
}

$script:DeselectedIndex = -1
$tabcontrolWizard_Deselecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# Store the previous tab index
	$script:DeselectedIndex = $_.TabPageIndex
}

$tabcontrolWizard_Selecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# We only validate if we are moving to the Next TabPage. 
	# Users can move back without validating
	if($script:DeselectedIndex -ne -1 -and $script:DeselectedIndex -lt $_.TabPageIndex)
	{
		#Validate each page until we reach the one we want
		for($index = $script:DeselectedIndex; $index -lt $_.TabPageIndex; $index++)
		{
			$_.Cancel = -not (Test-WizardPage $tabcontrolWizard.TabPages[$index])
			
			if($_.Cancel) 
			{
				# Cancel and Return if validation failed.
				return;
			}
		}
	}
	
	Update-NavButtons
}

$buttonBack_Click={
	#Go to the previous tab page
	if($tabcontrolWizard.SelectedIndex -gt 0)
	{
		$tabcontrolWizard.SelectedIndex--
	}
}

$buttonNext_Click={	
	#Go to the next tab page
	if($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	{
		$tabcontrolWizard.SelectedIndex++
	}
}

#endregion

#------------------------------------------------------
# NOTE: When a Control State changes you should call
# 		Update-NavButtons to trigger validation
#------------------------------------------------------

$textboxName_TextChanged={
	Update-NavButtons
}

$checkboxCheckToContinue_CheckedChanged={
	Update-NavButtons
}

$radiobuttonOption_CheckedChanged={
	
	if($this.Checked)
	{
		Update-NavButtons
	}
}

$statusbar1_PanelClick=[System.Windows.Forms.StatusBarPanelClickEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.StatusBarPanelClickEventArgs]
	#TODO: Place custom script here
	
}

#region Control Helper Functions
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}


function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}


function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	[ValidateNotNull()]
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterWMIProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)	
}
#endregion

$listviewApplications_ColumnClick=[System.Windows.Forms.ColumnClickEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.ColumnClickEventArgs]
	Update-ListViewColumnSort $this $_.Column
}

function Add-ToApplicationList
{
	<#
	.SYNOPSIS
		Adds a application to the ListView.

	.DESCRIPTION
		Adds a application to the ListView

	.PARAMETER  ApplicationPath
		The application's file path.

	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList. If not defined, it will try to extract the image from the application.

	.EXAMPLE
		Add-ToApplicationList 'C:\application.exe'

	.LINK
		about_comment_based_help

#>
	Param( 
  [ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
  [ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[string]$ApplicationPath,
	[int]$ImageIndex = -1)
	
	if(![string]::IsNullOrEmpty($ApplicationPath))
	{
		$AppExist = [System.IO.File]::Exists($ApplicationPath)
		
		if($AppExist)
		{
			if($null -eq $ImageIndex -or $ImageIndex -eq -1)
			{
				$icon = [System.Drawing.Icon]::ExtractAssociatedIcon($ApplicationPath)
				
				if($null -ne $icon)
				{
					$listview.LargeImageList.Images.Add($icon)
					$listview.SmallImageList.Images.Add($icon)
					$ImageIndex = $listview.LargeImageList.Images.Count - 1
				}
			}
		}
		elseif ($ImageIndex -eq -1)
		{
			$ImageIndex = 0	#Default the image
		}
		
		#Add a new item to the ListView
		$item  = $ListView.Items.Add([System.IO.Path]::GetFileName($ApplicationPath), $ImageIndex)
		$item.Tag = $ApplicationPath #Save the Path
		$item.ToolTipText = $ApplicationPath
		
		if($AppExist)
		{ 	
			#Set the status and the group
			[void]$item.SubItems.Add('Installed')
			$item.Group = $ListView.Groups[0]
		}
		else
		{
			[void]$item.SubItems.Add('Not Installed')
			$item.Group = $ListView.Groups[1]
		}
	}
}

$btn_Folder_Click={
	if($folderbrowserdialog1.ShowDialog() -eq 'OK')
	{
		$cb_Folder.Text = $folderbrowserdialog1.SelectedPath
	}
}

$lbl_Folder_Click={
	#TODO: Place custom script here
	
}

$buttonCancelProcess_Click={
	$script:CancelLoop = $true
}

$buttonStartProcess_Click={
	#Init CancelLoop
	$script:CancelLoop = $false
	$buttonCancelProcess.Enabled = $true
	#Disable the button so we don't trigger it again
	$this.Enabled = $false
	#Reset the Progress Bar
	$progressbar1.Value = 0
	
	for($i = 0; $i -lt $progressbar1.Maximum; $i++)
	{
		#----------------------------------------
		#Place custom script here
		sleep -Milliseconds 200
		
		#----------------------------------------
		#process the pending message
		[System.Windows.Forms.Application]::DoEvents()
		
		if($script:CancelLoop -eq $true)
		{
			#Clear the progress bar
			$progressbar1.Value = 0
			#Exit the loop
			break;
		}
		#Step the progress bar
		$progressbar1.PerformStep() 
	}
	
	#Enable the button so we can click it again
	$this.Enabled = $true
	$buttonCancelProcess.Enabled = $false
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>