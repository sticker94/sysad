#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 8a699e06-2426-4690-b98d-fe04fe0b3e35
# Source File: C:\Users\Insane\Documents\SAPIEN\PowerShell Studio\Projects\Sysad\MainForm.psf
#------------------------------------------------------------------------

<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2018 v5.5.148
     Generated on:       3/6/2019 2:35 AM
     Generated by:       Insane
    --------------------------------------------------------------------------------
    .DESCRIPTION
        GUI script generated by PowerShell Studio 2018
#>


#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Show-MainForm_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$labelDUETIX = New-Object 'System.Windows.Forms.Label'
	$groupbox4 = New-Object 'System.Windows.Forms.GroupBox'
	$datagridview14 = New-Object 'System.Windows.Forms.DataGridView'
	$label10 = New-Object 'System.Windows.Forms.Label'
	$datagridview13 = New-Object 'System.Windows.Forms.DataGridView'
	$label9 = New-Object 'System.Windows.Forms.Label'
	$datagridview12 = New-Object 'System.Windows.Forms.DataGridView'
	$label8 = New-Object 'System.Windows.Forms.Label'
	$datagridview11 = New-Object 'System.Windows.Forms.DataGridView'
	$label7 = New-Object 'System.Windows.Forms.Label'
	$labelBox = New-Object 'System.Windows.Forms.Label'
	$combobox1 = New-Object 'System.Windows.Forms.ComboBox'
	$datagridview10 = New-Object 'System.Windows.Forms.DataGridView'
	$labelServicesClass = New-Object 'System.Windows.Forms.Label'
	$groupbox3 = New-Object 'System.Windows.Forms.GroupBox'
	$datagridview9 = New-Object 'System.Windows.Forms.DataGridView'
	$label6 = New-Object 'System.Windows.Forms.Label'
	$datagridview8 = New-Object 'System.Windows.Forms.DataGridView'
	$label5 = New-Object 'System.Windows.Forms.Label'
	$datagridview7 = New-Object 'System.Windows.Forms.DataGridView'
	$labelOracleClass = New-Object 'System.Windows.Forms.Label'
	$datagridview6 = New-Object 'System.Windows.Forms.DataGridView'
	$label4Digit = New-Object 'System.Windows.Forms.Label'
	$groupbox2 = New-Object 'System.Windows.Forms.GroupBox'
	$datagridview5 = New-Object 'System.Windows.Forms.DataGridView'
	$label4 = New-Object 'System.Windows.Forms.Label'
	$datagridview4 = New-Object 'System.Windows.Forms.DataGridView'
	$label3 = New-Object 'System.Windows.Forms.Label'
	$datagridview3 = New-Object 'System.Windows.Forms.DataGridView'
	$label2 = New-Object 'System.Windows.Forms.Label'
	$datagridview2 = New-Object 'System.Windows.Forms.DataGridView'
	$label1 = New-Object 'System.Windows.Forms.Label'
	$datagridview1 = New-Object 'System.Windows.Forms.DataGridView'
	$labelClass = New-Object 'System.Windows.Forms.Label'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$cb_site = New-Object 'System.Windows.Forms.ComboBox'
	$cb_Folder = New-Object 'System.Windows.Forms.TextBox'
	$lbl_Folder = New-Object 'System.Windows.Forms.Label'
	$btn_Folder = New-Object 'System.Windows.Forms.Button'
	$lbl_site = New-Object 'System.Windows.Forms.Label'
	$folderbrowserdialog1 = New-Object 'System.Windows.Forms.FolderBrowserDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	#-------------------------------------------------------
	# NOTE: When new TabPage added place the validation code
	# 		in the Test-WizardPage function.
	#-------------------------------------------------------
	function Test-WizardPage
	{
	<#
		Add TabPages and place the validation code in this function
	#>
		[OutputType([boolean])]
		param([System.Windows.Forms.TabPage]$tabPage)
		
		if($tabPage -eq $tabpageStep1)
		{
			#TODO: Enter Validation Code here for Step 1
			if(-not $textboxName.Text)
			{
				return $false	
			}
			
			return $true
		}
		elseif ($tabPage -eq $tabpageStep2)
		{
			#TODO: Enter Validation Code here for Step 2
			if($checkboxCheckToContinue.Checked)
			{
				return $true
			}
			
			return $false
		}
		elseif ($tabPage -eq $tabpageStep3)
		{
			#TODO: Enter Validation Code here for Step 3
			if(	$radiobuttonOption1.Checked -or
				$radiobuttonOption2.Checked -or
				$radiobuttonOption3.Checked)
			{
				return $true
			}
		}
		#Add more pages here
		
		return $false
	}
	
	
	
	$buttonFinish_Click={
		#-------------------------------------------------------
		# TODO: Place finalization script here
		#-------------------------------------------------------
		
	}
	
	#region Events and Functions
	$MainForm_Load={
		Update-NavButtons
	}
	
	function Update-NavButtons
	{
		<# 
			.DESCRIPTION
			Validates the current tab and Updates the Next, Prev and Finish buttons.
		#>
		$enabled = Test-WizardPage $tabcontrolWizard.SelectedTab
		$buttonNext.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
		$buttonBack.Enabled = $tabcontrolWizard.SelectedIndex -gt 0
		$buttonFinish.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)	
		#Uncomment to Hide Buttons
		#$buttonNext.Visible = ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
		#$buttonFinish.Visible = ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)
	}
	
	$script:DeselectedIndex = -1
	$tabcontrolWizard_Deselecting=[System.Windows.Forms.TabControlCancelEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
		# Store the previous tab index
		$script:DeselectedIndex = $_.TabPageIndex
	}
	
	$tabcontrolWizard_Selecting=[System.Windows.Forms.TabControlCancelEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
		# We only validate if we are moving to the Next TabPage. 
		# Users can move back without validating
		if($script:DeselectedIndex -ne -1 -and $script:DeselectedIndex -lt $_.TabPageIndex)
		{
			#Validate each page until we reach the one we want
			for($index = $script:DeselectedIndex; $index -lt $_.TabPageIndex; $index++)
			{
				$_.Cancel = -not (Test-WizardPage $tabcontrolWizard.TabPages[$index])
				
				if($_.Cancel) 
				{
					# Cancel and Return if validation failed.
					return;
				}
			}
		}
		
		Update-NavButtons
	}
	
	$buttonBack_Click={
		#Go to the previous tab page
		if($tabcontrolWizard.SelectedIndex -gt 0)
		{
			$tabcontrolWizard.SelectedIndex--
		}
	}
	
	$buttonNext_Click={	
		#Go to the next tab page
		if($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
		{
			$tabcontrolWizard.SelectedIndex++
		}
	}
	
	#endregion
	
	#------------------------------------------------------
	# NOTE: When a Control State changes you should call
	# 		Update-NavButtons to trigger validation
	#------------------------------------------------------
	
	$textboxName_TextChanged={
		Update-NavButtons
	}
	
	$checkboxCheckToContinue_CheckedChanged={
		Update-NavButtons
	}
	
	$radiobuttonOption_CheckedChanged={
		
		if($this.Checked)
		{
			Update-NavButtons
		}
	}
	
	$statusbar1_PanelClick=[System.Windows.Forms.StatusBarPanelClickEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.StatusBarPanelClickEventArgs]
		#TODO: Place custom script here
		
	}
	
	#region Control Helper Functions
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]
			$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	function Update-ListViewColumnSort
	{
	<#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
		
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
		
		.PARAMETER ListView
			The ListView control to sort.
		
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
		
		.PARAMETER SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListView]
			$ListView,
			[Parameter(Mandatory = $true)]
			[int]
			$ColumnIndex,
			[System.Windows.Forms.SortOrder]
			$SortOrder = 'None'
		)
		
		if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		#region Define ListViewItemComparer
		try
		{
			[ListViewItemComparer] | Out-Null
		}
		catch
		{
			Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
		}
		#endregion
		
		if ($ListView.Tag -is [ListViewItemComparer])
		{
			#Toggle the Sort Order
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort() #Sort the items
		}
		else
		{
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
			}
			
			#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
			$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
		}
	}
	
	
	function Add-ListViewItem
	{
	<#
		.SYNOPSIS
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.DESCRIPTION
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.PARAMETER ListView
			The ListView control to add the items to.
	
		.PARAMETER Items
			The object or objects you wish to load into the ListView's Items collection.
			
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList.
		
		.PARAMETER  SubItems
			List of strings to add as Subitems.
		
		.PARAMETER Group
			The group to place the item(s) in.
		
		.PARAMETER Clear
			This switch clears the ListView's Items before adding the new item(s).
		
		.EXAMPLE
			Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
	#>
		
		Param( 
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ListView]$ListView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Items,
		[int]$ImageIndex = -1,
		[string[]]$SubItems,
		$Group,
		[switch]$Clear)
		
		if($Clear)
		{
			$ListView.Items.Clear();
	    }
	    
	    $lvGroup = $null
	    if ($Group -is [System.Windows.Forms.ListViewGroup])
	    {
	        $lvGroup = $Group
	    }
	    elseif ($Group -is [string])
	    {
	        #$lvGroup = $ListView.Group[$Group] # Case sensitive
	        foreach ($groupItem in $ListView.Groups)
	        {
	            if ($groupItem.Name -eq $Group)
	            {
	                $lvGroup = $groupItem
	                break
	            }
	        }
	        
	        if ($null -eq $lvGroup)
	        {
	            $lvGroup = $ListView.Groups.Add($Group, $Group)
	        }
	    }
	    
		if($Items -is [Array])
		{
			$ListView.BeginUpdate()
			foreach ($item in $Items)
			{		
				$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
				#Store the object in the Tag
				$listitem.Tag = $item
				
				if($null -ne $SubItems)
				{
					$listitem.SubItems.AddRange($SubItems)
				}
				
				if($null -ne $lvGroup)
				{
					$listitem.Group = $lvGroup
				}
			}
			$ListView.EndUpdate()
		}
		else
		{
			#Add a new item to the ListView
			$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $Items
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
	}
	
	
	function Update-ListBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
		
		.PARAMETER ListBox
			The ListBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ListBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ListBox $listBox1 "Red" -Append
			Update-ListBox $listBox1 "White" -Append
			Update-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Update-ListBox $listBox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListBox]
			$ListBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$listBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
		{
			$listBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$listBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$listBox.Items.Add($obj)
			}
			$listBox.EndUpdate()
		}
		else
		{
			$listBox.Items.Add($Items)
		}
		
		$listBox.DisplayMember = $DisplayMember
	}
	
	function Update-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		[ValidateNotNull()]
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { Out-Null }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @(,$Table)	
	}
	#endregion
	
	$listviewApplications_ColumnClick=[System.Windows.Forms.ColumnClickEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.ColumnClickEventArgs]
		Update-ListViewColumnSort $this $_.Column
	}
	
	function Add-ToApplicationList
	{
		<#
		.SYNOPSIS
			Adds a application to the ListView.
	
		.DESCRIPTION
			Adds a application to the ListView
	
		.PARAMETER  ApplicationPath
			The application's file path.
	
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList. If not defined, it will try to extract the image from the application.
	
		.EXAMPLE
			Add-ToApplicationList 'C:\application.exe'
	
		.LINK
			about_comment_based_help
	
	#>
		Param( 
	  [ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ListView]$ListView,
	  [ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[string]$ApplicationPath,
		[int]$ImageIndex = -1)
		
		if(![string]::IsNullOrEmpty($ApplicationPath))
		{
			$AppExist = [System.IO.File]::Exists($ApplicationPath)
			
			if($AppExist)
			{
				if($null -eq $ImageIndex -or $ImageIndex -eq -1)
				{
					$icon = [System.Drawing.Icon]::ExtractAssociatedIcon($ApplicationPath)
					
					if($null -ne $icon)
					{
						$listview.LargeImageList.Images.Add($icon)
						$listview.SmallImageList.Images.Add($icon)
						$ImageIndex = $listview.LargeImageList.Images.Count - 1
					}
				}
			}
			elseif ($ImageIndex -eq -1)
			{
				$ImageIndex = 0	#Default the image
			}
			
			#Add a new item to the ListView
			$item  = $ListView.Items.Add([System.IO.Path]::GetFileName($ApplicationPath), $ImageIndex)
			$item.Tag = $ApplicationPath #Save the Path
			$item.ToolTipText = $ApplicationPath
			
			if($AppExist)
			{ 	
				#Set the status and the group
				[void]$item.SubItems.Add('Installed')
				$item.Group = $ListView.Groups[0]
			}
			else
			{
				[void]$item.SubItems.Add('Not Installed')
				$item.Group = $ListView.Groups[1]
			}
		}
	}
	
	$btn_Folder_Click={
		if($folderbrowserdialog1.ShowDialog() -eq 'OK')
		{
			$cb_Folder.Text = $folderbrowserdialog1.SelectedPath
		}
		
		
	}
	
	$lbl_Folder_Click={
		#TODO: Place custom script here
		
	}
	
	$buttonCancelProcess_Click={
		$script:CancelLoop = $true
	}
	
	$buttonStartProcess_Click={
		#Init CancelLoop
		$script:CancelLoop = $false
		$buttonCancelProcess.Enabled = $true
		#Disable the button so we don't trigger it again
		$this.Enabled = $false
		#Reset the Progress Bar
		$progressbar1.Value = 0
		
		for($i = 0; $i -lt $progressbar1.Maximum; $i++)
		{
			#----------------------------------------
			#Place custom script here
			sleep -Milliseconds 200
			
			#----------------------------------------
			#process the pending message
			[System.Windows.Forms.Application]::DoEvents()
			
			if($script:CancelLoop -eq $true)
			{
				#Clear the progress bar
				$progressbar1.Value = 0
				#Exit the loop
				break;
			}
			#Step the progress bar
			$progressbar1.PerformStep() 
		}
		
		#Enable the button so we can click it again
		$this.Enabled = $true
		$buttonCancelProcess.Enabled = $false
	}
	
	$cb_site_SelectedValueChanged={
		#TODO: Place custom script here
		
	}
	
	$contextmenustrip1_Opening=[System.ComponentModel.CancelEventHandler]{
	#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		#TODO: Place custom script here
		
	}
	
	$cb_site_SelectedIndexChanged={
		#TODO: Place custom script here
		if ($cb_site.SelectedText -eq 'site1')
		{
			$folderbrowserdialog1.RootFolder = '<INSERT ROOT FOLDER>'
		}
		if ($cb_site.SelectedText -eq 'site2')
		{
			$folderbrowserdialog1.RootFolder = '<INSERT ROOT FOLDER>'
		}
		if ($cb_site.SelectedText -eq 'site3')
		{
			$folderbrowserdialog1.RootFolder = '<INSERT ROOT FOLDER>'
		}
		if ($cb_site.SelectedText -eq 'site4')
		{
			$folderbrowserdialog1.RootFolder = '<INSERT ROOT FOLDER>'
		}
		if ($cb_site.SelectedText -eq 'site5')
		{
			$folderbrowserdialog1.RootFolder = '<INSERT ROOT FOLDER>'
		}
	}
	
	$listviewSort_ColumnClick=[System.Windows.Forms.ColumnClickEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.ColumnClickEventArgs]
		Update-ListViewColumnSort -ListView $this -ColumnIndex $_.Column
	}
	
	$labelClass_Click={
		#TODO: Place custom script here
		
	}
	
	$label4Digit_Click={
		#TODO: Place custom script here
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$label4Digit.remove_Click($label4Digit_Click)
			$labelClass.remove_Click($labelClass_Click)
			$cb_site.remove_SelectedIndexChanged($cb_site_SelectedIndexChanged)
			$cb_site.remove_SelectedValueChanged($cb_site_SelectedValueChanged)
			$lbl_Folder.remove_Click($lbl_Folder_Click)
			$btn_Folder.remove_Click($btn_Folder_Click)
			$MainForm.remove_Load($MainForm_Load)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MainForm.SuspendLayout()
	$groupbox1.SuspendLayout()
	$groupbox2.SuspendLayout()
	$groupbox3.SuspendLayout()
	$groupbox4.SuspendLayout()
	#
	# MainForm
	#
	$MainForm.Controls.Add($labelDUETIX)
	$MainForm.Controls.Add($groupbox4)
	$MainForm.Controls.Add($groupbox3)
	$MainForm.Controls.Add($groupbox2)
	$MainForm.Controls.Add($groupbox1)
	$MainForm.AcceptButton = $btn_Folder
	$MainForm.AutoScaleDimensions = '6, 13'
	$MainForm.AutoScaleMode = 'Font'
	$MainForm.ClientSize = '1349, 665'
	$MainForm.FormBorderStyle = 'FixedDialog'
	$MainForm.MaximizeBox = $False
	$MainForm.Name = 'MainForm'
	$MainForm.StartPosition = 'CenterScreen'
	$MainForm.Text = 'SysAdProj'
	$MainForm.add_Load($MainForm_Load)
	#
	# labelDUETIX
	#
	$labelDUETIX.AutoSize = $True
	$labelDUETIX.Font = 'Castellar, 20.25pt, style=Bold'
	$labelDUETIX.Location = '1204, 22'
	$labelDUETIX.Name = 'labelDUETIX'
	$labelDUETIX.Size = '133, 39'
	$labelDUETIX.TabIndex = 13
	$labelDUETIX.Text = 'DUETIX'
	$labelDUETIX.UseCompatibleTextRendering = $True
	#
	# groupbox4
	#
	$groupbox4.Controls.Add($datagridview14)
	$groupbox4.Controls.Add($label10)
	$groupbox4.Controls.Add($datagridview13)
	$groupbox4.Controls.Add($label9)
	$groupbox4.Controls.Add($datagridview12)
	$groupbox4.Controls.Add($label8)
	$groupbox4.Controls.Add($datagridview11)
	$groupbox4.Controls.Add($label7)
	$groupbox4.Controls.Add($labelBox)
	$groupbox4.Controls.Add($combobox1)
	$groupbox4.Controls.Add($datagridview10)
	$groupbox4.Controls.Add($labelServicesClass)
	$groupbox4.Location = '668, 79'
	$groupbox4.Name = 'groupbox4'
	$groupbox4.Size = '669, 574'
	$groupbox4.TabIndex = 12
	$groupbox4.TabStop = $False
	$groupbox4.Text = 'Services'
	$groupbox4.UseCompatibleTextRendering = $True
	#
	# datagridview14
	#
	$datagridview14.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview14.Location = '14, 372'
	$datagridview14.Name = 'datagridview14'
	$datagridview14.Size = '301, 196'
	$datagridview14.TabIndex = 24
	#
	# label10
	#
	$label10.AutoSize = $True
	$label10.Font = 'Microsoft Sans Serif, 8.25pt'
	$label10.Location = '129, 349'
	$label10.Name = 'label10'
	$label10.Size = '88, 17'
	$label10.TabIndex = 25
	$label10.Text = 'Services Class #'
	$label10.UseCompatibleTextRendering = $True
	#
	# datagridview13
	#
	$datagridview13.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview13.Location = '343, 413'
	$datagridview13.Name = 'datagridview13'
	$datagridview13.Size = '301, 155'
	$datagridview13.TabIndex = 22
	#
	# label9
	#
	$label9.AutoSize = $True
	$label9.Font = 'Microsoft Sans Serif, 8.25pt'
	$label9.Location = '458, 390'
	$label9.Name = 'label9'
	$label9.Size = '88, 17'
	$label9.TabIndex = 23
	$label9.Text = 'Services Class #'
	$label9.UseCompatibleTextRendering = $True
	#
	# datagridview12
	#
	$datagridview12.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview12.Location = '343, 224'
	$datagridview12.Name = 'datagridview12'
	$datagridview12.Size = '301, 155'
	$datagridview12.TabIndex = 20
	#
	# label8
	#
	$label8.AutoSize = $True
	$label8.Font = 'Microsoft Sans Serif, 8.25pt'
	$label8.Location = '458, 201'
	$label8.Name = 'label8'
	$label8.Size = '88, 17'
	$label8.TabIndex = 21
	$label8.Text = 'Services Class #'
	$label8.UseCompatibleTextRendering = $True
	#
	# datagridview11
	#
	$datagridview11.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview11.Location = '343, 40'
	$datagridview11.Name = 'datagridview11'
	$datagridview11.Size = '301, 155'
	$datagridview11.TabIndex = 18
	#
	# label7
	#
	$label7.AutoSize = $True
	$label7.Font = 'Microsoft Sans Serif, 8.25pt'
	$label7.Location = '458, 17'
	$label7.Name = 'label7'
	$label7.Size = '88, 17'
	$label7.TabIndex = 19
	$label7.Text = 'Services Class #'
	$label7.UseCompatibleTextRendering = $True
	#
	# labelBox
	#
	$labelBox.AutoSize = $True
	$labelBox.Location = '153, 21'
	$labelBox.Name = 'labelBox'
	$labelBox.Size = '24, 17'
	$labelBox.TabIndex = 17
	$labelBox.Text = 'Box'
	$labelBox.UseCompatibleTextRendering = $True
	#
	# combobox1
	#
	$combobox1.FormattingEnabled = $True
	$combobox1.Location = '194, 17'
	$combobox1.Name = 'combobox1'
	$combobox1.Size = '121, 21'
	$combobox1.TabIndex = 16
	#
	# datagridview10
	#
	$datagridview10.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview10.Location = '14, 40'
	$datagridview10.Name = 'datagridview10'
	$datagridview10.Size = '301, 304'
	$datagridview10.TabIndex = 14
	#
	# labelServicesClass
	#
	$labelServicesClass.AutoSize = $True
	$labelServicesClass.Font = 'Microsoft Sans Serif, 8.25pt'
	$labelServicesClass.Location = '14, 20'
	$labelServicesClass.Name = 'labelServicesClass'
	$labelServicesClass.Size = '88, 17'
	$labelServicesClass.TabIndex = 15
	$labelServicesClass.Text = 'Services Class #'
	$labelServicesClass.UseCompatibleTextRendering = $True
	#
	# groupbox3
	#
	$groupbox3.Controls.Add($datagridview9)
	$groupbox3.Controls.Add($label6)
	$groupbox3.Controls.Add($datagridview8)
	$groupbox3.Controls.Add($label5)
	$groupbox3.Controls.Add($datagridview7)
	$groupbox3.Controls.Add($labelOracleClass)
	$groupbox3.Controls.Add($datagridview6)
	$groupbox3.Controls.Add($label4Digit)
	$groupbox3.Location = '348, 79'
	$groupbox3.Name = 'groupbox3'
	$groupbox3.Size = '314, 574'
	$groupbox3.TabIndex = 11
	$groupbox3.TabStop = $False
	$groupbox3.Text = 'CDATA'
	$groupbox3.UseCompatibleTextRendering = $True
	#
	# datagridview9
	#
	$datagridview9.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview9.Location = '6, 347'
	$datagridview9.Name = 'datagridview9'
	$datagridview9.Size = '297, 221'
	$datagridview9.TabIndex = 16
	#
	# label6
	#
	$label6.AutoSize = $True
	$label6.Font = 'Microsoft Sans Serif, 8.25pt'
	$label6.Location = '116, 327'
	$label6.Name = 'label6'
	$label6.Size = '78, 17'
	$label6.TabIndex = 17
	$label6.Text = 'Oracle Class #'
	$label6.UseCompatibleTextRendering = $True
	#
	# datagridview8
	#
	$datagridview8.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview8.Location = '6, 198'
	$datagridview8.Name = 'datagridview8'
	$datagridview8.Size = '297, 118'
	$datagridview8.TabIndex = 14
	#
	# label5
	#
	$label5.AutoSize = $True
	$label5.Font = 'Microsoft Sans Serif, 8.25pt'
	$label5.Location = '116, 178'
	$label5.Name = 'label5'
	$label5.Size = '78, 17'
	$label5.TabIndex = 15
	$label5.Text = 'Oracle Class #'
	$label5.UseCompatibleTextRendering = $True
	#
	# datagridview7
	#
	$datagridview7.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview7.Location = '6, 95'
	$datagridview7.Name = 'datagridview7'
	$datagridview7.Size = '297, 69'
	$datagridview7.TabIndex = 12
	#
	# labelOracleClass
	#
	$labelOracleClass.AutoSize = $True
	$labelOracleClass.Font = 'Microsoft Sans Serif, 8.25pt'
	$labelOracleClass.Location = '116, 75'
	$labelOracleClass.Name = 'labelOracleClass'
	$labelOracleClass.Size = '78, 17'
	$labelOracleClass.TabIndex = 13
	$labelOracleClass.Text = 'Oracle Class #'
	$labelOracleClass.UseCompatibleTextRendering = $True
	#
	# datagridview6
	#
	$datagridview6.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview6.Location = '85, 36'
	$datagridview6.Name = 'datagridview6'
	$datagridview6.Size = '137, 21'
	$datagridview6.TabIndex = 12
	#
	# label4Digit
	#
	$label4Digit.AutoSize = $True
	$label4Digit.Font = 'Microsoft Sans Serif, 8.25pt'
	$label4Digit.Location = '130, 16'
	$label4Digit.Name = 'label4Digit'
	$label4Digit.Size = '46, 17'
	$label4Digit.TabIndex = 13
	$label4Digit.Text = '4 Digit #'
	$label4Digit.UseCompatibleTextRendering = $True
	$label4Digit.add_Click($label4Digit_Click)
	#
	# groupbox2
	#
	$groupbox2.Controls.Add($datagridview5)
	$groupbox2.Controls.Add($label4)
	$groupbox2.Controls.Add($datagridview4)
	$groupbox2.Controls.Add($label3)
	$groupbox2.Controls.Add($datagridview3)
	$groupbox2.Controls.Add($label2)
	$groupbox2.Controls.Add($datagridview2)
	$groupbox2.Controls.Add($label1)
	$groupbox2.Controls.Add($datagridview1)
	$groupbox2.Controls.Add($labelClass)
	$groupbox2.Location = '12, 79'
	$groupbox2.Name = 'groupbox2'
	$groupbox2.Size = '330, 574'
	$groupbox2.TabIndex = 10
	$groupbox2.TabStop = $False
	$groupbox2.Text = 'Server Status'
	$groupbox2.UseCompatibleTextRendering = $True
	#
	# datagridview5
	#
	$datagridview5.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview5.Location = '6, 468'
	$datagridview5.Name = 'datagridview5'
	$datagridview5.Size = '294, 100'
	$datagridview5.TabIndex = 11
	#
	# label4
	#
	$label4.AutoSize = $True
	$label4.Font = 'Microsoft Sans Serif, 8.25pt'
	$label4.Location = '130, 448'
	$label4.Name = 'label4'
	$label4.Size = '42, 17'
	$label4.TabIndex = 12
	$label4.Text = 'Class #'
	$label4.UseCompatibleTextRendering = $True
	#
	# datagridview4
	#
	$datagridview4.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview4.Location = '156, 244'
	$datagridview4.Name = 'datagridview4'
	$datagridview4.Size = '144, 187'
	$datagridview4.TabIndex = 14
	#
	# label3
	#
	$label3.AutoSize = $True
	$label3.Font = 'Microsoft Sans Serif, 8.25pt'
	$label3.Location = '206, 224'
	$label3.Name = 'label3'
	$label3.Size = '42, 17'
	$label3.TabIndex = 15
	$label3.Text = 'Class #'
	$label3.UseCompatibleTextRendering = $True
	#
	# datagridview3
	#
	$datagridview3.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview3.Location = '6, 244'
	$datagridview3.Name = 'datagridview3'
	$datagridview3.Size = '144, 187'
	$datagridview3.TabIndex = 12
	#
	# label2
	#
	$label2.AutoSize = $True
	$label2.Font = 'Microsoft Sans Serif, 8.25pt'
	$label2.Location = '56, 224'
	$label2.Name = 'label2'
	$label2.Size = '42, 17'
	$label2.TabIndex = 13
	$label2.Text = 'Class #'
	$label2.UseCompatibleTextRendering = $True
	#
	# datagridview2
	#
	$datagridview2.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview2.Location = '156, 40'
	$datagridview2.Name = 'datagridview2'
	$datagridview2.Size = '144, 176'
	$datagridview2.TabIndex = 10
	#
	# label1
	#
	$label1.AutoSize = $True
	$label1.Font = 'Microsoft Sans Serif, 8.25pt'
	$label1.Location = '206, 20'
	$label1.Name = 'label1'
	$label1.Size = '42, 17'
	$label1.TabIndex = 11
	$label1.Text = 'Class #'
	$label1.UseCompatibleTextRendering = $True
	#
	# datagridview1
	#
	$datagridview1.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview1.Location = '6, 40'
	$datagridview1.Name = 'datagridview1'
	$datagridview1.Size = '144, 176'
	$datagridview1.TabIndex = 8
	#
	# labelClass
	#
	$labelClass.AutoSize = $True
	$labelClass.Font = 'Microsoft Sans Serif, 8.25pt'
	$labelClass.Location = '56, 20'
	$labelClass.Name = 'labelClass'
	$labelClass.Size = '42, 17'
	$labelClass.TabIndex = 9
	$labelClass.Text = 'Class #'
	$labelClass.UseCompatibleTextRendering = $True
	$labelClass.add_Click($labelClass_Click)
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($cb_site)
	$groupbox1.Controls.Add($cb_Folder)
	$groupbox1.Controls.Add($lbl_Folder)
	$groupbox1.Controls.Add($btn_Folder)
	$groupbox1.Controls.Add($lbl_site)
	$groupbox1.Location = '12, 12'
	$groupbox1.Name = 'groupbox1'
	$groupbox1.Size = '695, 61'
	$groupbox1.TabIndex = 7
	$groupbox1.TabStop = $False
	$groupbox1.Text = 'Settings'
	$groupbox1.UseCompatibleTextRendering = $True
	#
	# cb_site
	#
	[void]$cb_site.AutoCompleteCustomSource.Add('BOC')
	[void]$cb_site.AutoCompleteCustomSource.Add('DOC')
	[void]$cb_site.AutoCompleteCustomSource.Add('LOC')
	[void]$cb_site.AutoCompleteCustomSource.Add('MOC')
	[void]$cb_site.AutoCompleteCustomSource.Add('WOC')
	$cb_site.DropDownStyle = 'DropDownList'
	$cb_site.FormattingEnabled = $True
	$cb_site.Location = '66, 19'
	$cb_site.Name = 'cb_site'
	$cb_site.Size = '152, 21'
	$cb_site.TabIndex = 0
	$cb_site.add_SelectedIndexChanged($cb_site_SelectedIndexChanged)
	$cb_site.add_SelectedValueChanged($cb_site_SelectedValueChanged)
	#
	# cb_Folder
	#
	$cb_Folder.AllowDrop = $True
	$cb_Folder.AutoCompleteMode = 'SuggestAppend'
	$cb_Folder.AutoCompleteSource = 'FileSystemDirectories'
	$cb_Folder.Location = '332, 19'
	$cb_Folder.Name = 'cb_Folder'
	$cb_Folder.ReadOnly = $True
	$cb_Folder.Size = '228, 20'
	$cb_Folder.TabIndex = 3
	$cb_Folder.Text = 'SELECT DTG FOLDER'
	#
	# lbl_Folder
	#
	$lbl_Folder.AutoSize = $True
	$lbl_Folder.Font = 'Microsoft Sans Serif, 9.75pt'
	$lbl_Folder.Location = '244, 21'
	$lbl_Folder.Name = 'lbl_Folder'
	$lbl_Folder.Size = '86, 20'
	$lbl_Folder.TabIndex = 6
	$lbl_Folder.Text = 'Current View:'
	$lbl_Folder.UseCompatibleTextRendering = $True
	$lbl_Folder.add_Click($lbl_Folder_Click)
	#
	# btn_Folder
	#
	$btn_Folder.Location = '566, 17'
	$btn_Folder.Name = 'btn_Folder'
	$btn_Folder.Size = '30, 23'
	$btn_Folder.TabIndex = 4
	$btn_Folder.Text = '...'
	$btn_Folder.UseCompatibleTextRendering = $True
	$btn_Folder.UseVisualStyleBackColor = $True
	$btn_Folder.add_Click($btn_Folder_Click)
	#
	# lbl_site
	#
	$lbl_site.AutoSize = $True
	$lbl_site.Font = 'Microsoft Sans Serif, 9.75pt'
	$lbl_site.Location = '33, 22'
	$lbl_site.Name = 'lbl_site'
	$lbl_site.Size = '32, 20'
	$lbl_site.TabIndex = 5
	$lbl_site.Text = 'Site:'
	$lbl_site.UseCompatibleTextRendering = $True
	#
	# folderbrowserdialog1
	#
	$folderbrowserdialog1.Description = 'Select the DTG data you would like to view.'
	$groupbox4.ResumeLayout()
	$groupbox3.ResumeLayout()
	$groupbox2.ResumeLayout()
	$groupbox1.ResumeLayout()
	$MainForm.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $MainForm.ShowDialog()

} #End Function

#Call the form
Show-MainForm_psf | Out-Null
